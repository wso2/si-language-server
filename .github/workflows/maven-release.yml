name: Maven Release

on:
  workflow_dispatch: { }

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Validate Maven
        run: mvn -version

      - name: Read current version
        id: read_version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=$current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Compute next version
        id: compute_next
        run: |
          current_version="${{ steps.read_version.outputs.current_version }}"
          # For SNAPSHOT versions like 1.0.0-SNAPSHOT
          if [[ "$current_version" == *"-SNAPSHOT" ]]; then
            # Remove -SNAPSHOT for release version
            release_version="${current_version/-SNAPSHOT/}"
            # Split version into parts (major.minor.patch)
            IFS='.' read -ra VERSION_PARTS <<< "$release_version"
            major=${VERSION_PARTS[0]}
            minor=${VERSION_PARTS[1]}
            patch=${VERSION_PARTS[2]}
            # Increment patch version for next development version
            next_patch=$((patch + 1))
            next_version="$major.$minor.$next_patch-SNAPSHOT"
          else
            # If not a SNAPSHOT, treat as release and increment patch
            IFS='.' read -ra VERSION_PARTS <<< "$current_version"
            major=${VERSION_PARTS[0]}
            minor=${VERSION_PARTS[1]}
            patch=${VERSION_PARTS[2]}
            release_version="$current_version"
            next_patch=$((patch + 1))
            next_version="$major.$minor.$next_patch-SNAPSHOT"
          fi
          # print for debugging
          echo "release_version=$release_version"
          echo "next_version=$next_version"
          # set outputs for next steps
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"

      - name: Configure Maven settings file
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>nexus-releases</id>
                      <username>${{ secrets.NEXUS_USERNAME }}</username>
                      <password>${{ secrets.NEXUS_PASSWORD }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Configure git credentials
        run: |
          git config --global user.name ${{ secrets.WSO2_INTEGRATION_BOT_USERNAME }}
          git config --global user.email ${{ secrets.WSO2_INTEGRATION_BOT_EMAIL }}

      - name: Build artifacts
        run: |
          mvn clean install -DskipTests

      - name: Deploy artifacts with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.WSO2_INTEGRATION_BOT_TOKEN}}
        run: |
          mvn --batch-mode release:prepare release:perform \
            -DreleaseVersion=${{ steps.compute_next.outputs.release_version }} \
            -DdevelopmentVersion=${{ steps.compute_next.outputs.next_version }} \
            -Dtag=${{ steps.compute_next.outputs.release_version }} \
            -Darguments="-DskipTests"

      - name: zip the LS files
        run: |
          zip -j si-language-server-${{steps.compute_next.outputs.release_version}}.zip \
          components/io.siddhi.langserver.launcher/target/io.siddhi.langserver.launcher-${{steps.compute_next.outputs.release_version}}.jar \
          components/io.siddhi.langserver.core/target/io.siddhi.langserver.core-${{steps.compute_next.outputs.release_version}}.jar \
          components/io.siddhi.langserver.runner/target/io.siddhi.langserver.runner-${{steps.compute_next.outputs.release_version}}.jar \
          -x '*tests.jar' '*-sources.jar' '*-javadoc.jar'

      - name: Create Github Release with Assets
        env:
          GITHUB_TOKEN: ${{ secrets.WSO2_INTEGRATION_BOT_TOKEN }}
        run: |
          gh release create "${{ steps.compute_next.outputs.release_version }}" \
            --repo="$GITHUB_REPOSITORY" \
            --title="SI Language Server ${{ steps.compute_next.outputs.release_version }}" \
            --generate-notes \
            si-language-server-${{ steps.compute_next.outputs.release_version }}.zip
